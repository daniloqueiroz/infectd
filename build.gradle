project.version = "1.0"

// Repositories
buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath (
                'com.mapvine:gradle-cobertura-plugin:1.0',
                'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.0',
                'com.github.ben-manes:gradle-versions-plugin:0.3',
                'com.tomcawley:gradle-protobuf-plugin:0.3',
                )
    }
}
repositories { 
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'gradleProtobufPlugin'
// extra plugins
apply plugin: 'eclipse'
apply plugin: 'versions'
apply plugin:'application'
// Reports plugins
apply plugin: 'build-dashboard'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'cobertura'
apply plugin: 'license'

dependencies {
    compile (
        'com.google.inject:guice:3.0',
        'com.google.guava:guava:15.0',
        'io.netty:netty-all:4.0.12.Final',
        'io.netty:netty-transport-udt:4.0.12.Final',
        'org.slf4j:slf4j-api:1.7.5',
        'com.google.protobuf:protobuf-java:2.4.1',
    )

    runtime (
        // Logback runtime
        'ch.qos.logback:logback-classic:1.0.11',
        'org.slf4j:log4j-over-slf4j:1.7.5',
        'net.logstash.logback:logstash-logback-encoder:1.1',
        'org.codehaus.janino:janino:2.6.1',
    )

    testCompile (
        'junit:junit:4.11',
        'org.easymock:easymock:3.1',
        'org.powermock:powermock-module-junit4:1.5',
        'org.powermock:powermock-api-easymock:1.5',
    )
}

mainClassName = "bz.infectd.Application"

// Avoid cleanProto task (deletes code)
clean.dependsOn = []

run {
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
    if(project.hasProperty('debug')){
        jvmArgs "-Dinfectd.debug=" + project.debug
    }
}

test { 
    // Avoid VerifyError regards cobertura instrumentation
    jvmArgs "-XX:-UseSplitVerifier"
}

javadoc {
    options {
        doclet = "com.visural.doclets.markdown.standard.Standard"
        docletpath = [
            rootProject.file('./extras/MarkdownDoclet-3.0.jar')
        ]
        // http://sensemaya.org/maya/2009/07/10/making-javadoc-more-legible
        stylesheetFile = rootProject.file('./extras/javadoc-stylesheet.css')
    }
}

protoBuf {
    protoc {
        'Linux' {
            path = '/usr/bin/protoc'
        }
    }
    lang {
        java
    }
}


[findbugsMain, findbugsTest]*.reports {
    xml.enabled false
    html.enabled true
}
findbugs { ignoreFailures = true }

checkstyle {
    configFile = rootProject.file("extras/checkstyle.xml")
}

cobertura {
    format = 'html'
    includes = ['**/*.java']
}

license {
    // https://github.com/hierynomus/license-gradle-plugin
    header rootProject.file('./extras/HEADER.license')
    strictCheck true

    ext.year = 2013
    ext.email = 'dpenna.queiroz@gmail.com'
}

// Docker Tasks
task dockerBuild(dependsOn: distTar, type:Exec) {
    // Build docker image
    commandLine '/usr/bin/docker', 'build', '-rm=true', '.'
}
